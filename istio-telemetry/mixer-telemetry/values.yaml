mixer:
  telemetry:
    image: mixer
    env:
      GODEBUG: gctrace=2
    enabled: true
    replicaCount: 1
    autoscaleEnabled: true
    autoscaleMin: 1
    autoscaleMax: 5
    cpu:
      targetAverageUtilization: 80

    resources:
      requests:
        cpu: 900m
        memory: 1G

    podAnnotations: {}

    adapters:
      # stdio is a debug adapter in istio-telemetry, it is not recommended for production use.
      stdio:
        # If set to true, will add 'rule' and 'stdio' handler for access logs.
        # If false, user will need to configure their own rules outside of installer.
        enabled: false
        outputAsJson: false

      prometheus:
        enabled: true
        metricsExpiryDuration: 10m

      kubernetesenv:
        enabled: true

      # Setting this to false sets the useAdapterCRDs mixer startup argument to false
      useAdapterCRDs: false

    nodeSelector: {}
    tolerations: []

    # Specify the pod anti-affinity that allows you to constrain which nodes
    # your pod is eligible to be scheduled based on labels on pods that are
    # already running on the node rather than based on labels on nodes.
    # There are currently two types of anti-affinity:
    #    "requiredDuringSchedulingIgnoredDuringExecution"
    #    "preferredDuringSchedulingIgnoredDuringExecution"
    # which denote “hard” vs. “soft” requirements, you can define your values
    # in "podAntiAffinityLabelSelector" and "podAntiAffinityTermLabelSelector"
    # correspondingly.
    # For example:
    # podAntiAffinityLabelSelector:
    # - key: security
    #   operator: In
    #   values: S1,S2
    #   topologyKey: "kubernetes.io/hostname"
    # This pod anti-affinity rule says that the pod requires not to be scheduled
    # onto a node if that node is already running a pod with label having key
    # “security” and value “S1”.
    podAntiAffinityLabelSelector: []
    podAntiAffinityTermLabelSelector: []

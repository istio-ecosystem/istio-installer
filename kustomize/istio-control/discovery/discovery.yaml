---
# Source: istio-discovery/templates/poddisruptionbudget.yaml

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: istio-pilot
  namespace: istio-control
  labels:
    app: pilot
    release: istio-control-istio-discovery
    istio: pilot
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: pilot
      release: istio-control-istio-discovery
      istio: pilot

---
# Source: istio-discovery/templates/configmap-envoy.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: istio-control
  name: pilot-envoy-config
  labels:
    release: istio-control-istio-discovery
data:
  envoy.yaml.tmpl: |-
    admin:
      access_log_path: /dev/null
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 15000

    static_resources:
      clusters:
      - name: in.15010
        http2_protocol_options: {}
        connect_timeout: 1.000s

        hosts:
        - socket_address:
            address: 127.0.0.1
            port_value: 15010

        circuit_breakers:
          thresholds:
          - max_connections: 100000
            max_pending_requests: 100000
            max_requests: 100000
            max_retries: 3

    # TODO: telemetry using EDS
    # TODO: other pilots using EDS, load balancing
    # TODO: galley using EDS

      - name: out.galley.15019
        http2_protocol_options: {}
        connect_timeout: 1.000s
        type: STRICT_DNS

        circuit_breakers:
          thresholds:
            - max_connections: 100000
              max_pending_requests: 100000
              max_requests: 100000
              max_retries: 3

        tls_context:
          common_tls_context:
            tls_certificates:
            - certificate_chain:
                filename: /etc/certs/cert-chain.pem
              private_key:
                filename: /etc/certs/key.pem
            validation_context:
              trusted_ca:
                filename: /etc/certs/root-cert.pem
              verify_subject_alt_name:
              - spiffe://cluster.local/ns/istio-control/sa/istio-galley-service-account

        hosts:
          - socket_address:
              address: istio-galley.istio-control
              port_value: 15019


      listeners:
      - name: "in.15011"
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 15011
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            #typed_config
            #"@type": "type.googleapis.com/",
            config:
              codec_type: HTTP2
              stat_prefix: "15011"
              http2_protocol_options:
                max_concurrent_streams: 1073741824

              access_log:
              - name: envoy.file_access_log
                config:
                  path: /dev/stdout

              http_filters:
              - name: envoy.router

              route_config:
                name: "15011"

                virtual_hosts:
                - name: istio-pilot

                  domains:
                  - '*'

                  routes:
                  - match:
                      prefix: /
                    route:
                      cluster: in.15010
                      timeout: 0.000s
                    decorator:
                      operation: xDS

          tls_context:
            require_client_certificate: true
            common_tls_context:
              validation_context:
                trusted_ca:
                  filename: /etc/certs/root-cert.pem

              alpn_protocols:
              - h2

              tls_certificates:
              - certificate_chain:
                  filename: /etc/certs/cert-chain.pem
                private_key:
                  filename: /etc/certs/key.pem


      # Manual 'whitebox' mode
      - name: "local.15019"
        address:
          socket_address:
            address: 127.0.0.1
            port_value: 15019
        filter_chains:
          - filters:
              - name: envoy.http_connection_manager
                config:
                  codec_type: HTTP2
                  stat_prefix: "15019"
                  http2_protocol_options:
                    max_concurrent_streams: 1073741824

                  access_log:
                    - name: envoy.file_access_log
                      config:
                        path: /dev/stdout

                  http_filters:
                    - name: envoy.router

                  route_config:
                    name: "15019"

                    virtual_hosts:
                      - name: istio-galley

                        domains:
                          - '*'

                        routes:
                          - match:
                              prefix: /
                            route:
                              cluster: out.galley.15019
                              timeout: 0.000s


---
# Source: istio-discovery/templates/configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: istio
  namespace: istio-control
  labels:
    release: istio-control-istio-discovery
data:

  meshNetworks: |-
    # Network config
    networks: {}
    

  values.yaml: |-
    appNamespaces: []
    autoscaleEnabled: true
    autoscaleMax: 5
    autoscaleMin: 1
    configMap: true
    configNamespace: istio-config
    cpu:
      targetAverageUtilization: 80
    deploymentLabels: null
    env:
      GODEBUG: gctrace=1
    image: pilot
    ingress:
      ingressClass: istio
      ingressControllerMode: "OFF"
      ingressService: istio-ingressgateway
    keepaliveMaxServerConnectionAge: 30m
    meshNetworks:
      networks: {}
    nodeSelector: {}
    podAntiAffinityLabelSelector: []
    podAntiAffinityTermLabelSelector: []
    policy:
      enabled: false
    replicaCount: 1
    resources:
      requests:
        cpu: 500m
        memory: 2048Mi
    telemetry:
      enabled: true
    tolerations: []
    traceSampling: 1
    useMCP: true
    

  mesh: |-
    # Set enableTracing to false to disable request tracing.
    enableTracing: true

    # Set accessLogFile to empty string to disable access log.
    accessLogFile: ""
    #
    # reportBatchMaxEntries is the number of requests that are batched before telemetry data is sent to the mixer server
    reportBatchMaxEntries: 100
    # reportBatchMaxTime is the max waiting time before the telemetry data of a request is sent to the mixer server
    reportBatchMaxTime: 1s
    mixerReportServer: istio-telemetry.istio-telemetry.svc.cluster.local:15004
    mixerCheckServer: istio-policy.istio-policy.svc.cluster.local:15004

    disablePolicyChecks: true


    # This is the k8s ingress service name, update if you used a different name
    ingressService: "istio-ingressgateway"
    ingressControllerMode: "OFF"
    ingressClass: "istio"
    # Unix Domain Socket through which envoy communicates with NodeAgent SDS to get
    # key/cert for mTLS. Use secret-mount files instead of SDS if set to empty.
    sdsUdsPath: 
    config_sources:
    - address: localhost:15019

    outboundTrafficPolicy:
      mode: ALLOW_ANY

    localityLbSetting:
      {}
      

    defaultConfig:
      #
      # TCP connection timeout between Envoy & the application, and between Envoys.
      connectTimeout: 10s
      #
      ### ADVANCED SETTINGS #############
      # Where should envoy's configuration be stored in the istio-proxy container
      configPath: "/etc/istio/proxy"
      # The pseudo service name used for Envoy.
      serviceCluster: istio-proxy
      # These settings that determine how long an old Envoy
      # process should be kept alive after an occasional reload.
      drainDuration: 45s
      parentShutdownDuration: 1m0s
      #
      # Port where Envoy listens (on local host) for admin commands
      # You can exec into the istio-proxy container in a pod and
      # curl the admin port (curl http://localhost:15000/) to obtain
      # diagnostic information from Envoy. See
      # https://lyft.github.io/envoy/docs/operations/admin.html
      # for more details
      proxyAdminPort: 15000
      #
      # Set concurrency to a specific number to control the number of Proxy worker threads.
      # If set to 0 (default), then start worker thread for each CPU thread/core.
      concurrency: 2
      #
      tracing:
        zipkin:
          # Address of the Zipkin collector
          address: zipkin.istio-telemetry:9411
      #
      # Mutual TLS authentication between sidecars and istio control plane.
      controlPlaneAuthPolicy: MUTUAL_TLS
      #
      # Address where istio Pilot service is running
      discoveryAddress: istio-pilot.istio-control:15011

---
# Source: istio-discovery/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-pilot-service-account
  namespace: istio-control
  labels:
    app: pilot
    release: istio-control-istio-discovery

---
# Source: istio-discovery/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: istio-pilot-istio-control
  labels:
    app: pilot
    release: istio-control-istio-discovery
rules:
- apiGroups: ["config.istio.io"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["rbac.istio.io"]
  resources: ["*"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["networking.istio.io"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["authentication.istio.io"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["*"]
- apiGroups: ["extensions"]
  resources: ["ingresses", "ingresses/status"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "get", "list", "watch", "update"]
- apiGroups: [""]
  resources: ["endpoints", "pods", "services", "namespaces", "nodes", "secrets"]
  verbs: ["get", "list", "watch"]

---
# Source: istio-discovery/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istio-pilot-istio-control
  labels:
    app: pilot
    release: istio-control-istio-discovery
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-pilot-istio-control
subjects:
  - kind: ServiceAccount
    name: istio-pilot-service-account
    namespace: istio-control

---
# Source: istio-discovery/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: istio-pilot
  namespace: istio-control
  labels:
    app: pilot
    release: istio-control-istio-discovery
    istio: pilot
spec:
  ports:
  - port: 15010
    name: grpc-xds # direct
  - port: 15011
    name: https-xds # mTLS
  - port: 8080
    name: http-legacy-discovery # direct
  - port: 15014
    name: http-monitoring
  selector:
    istio: pilot

---
# Source: istio-discovery/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: istio-pilot
  namespace: istio-control
  # TODO: default template doesn't have this, which one is right ?
  labels:
    app: pilot
    release: istio-control-istio-discovery
    istio: pilot
  annotations:
    checksum/config-volume:  c20ce28acd114c762cba065c6107f355d66db3e93c5e73d37fe13bfb62846449
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      istio: pilot
  template:
    metadata:
      labels:
        app: pilot
        istio: pilot
      annotations:
        sidecar.istio.io/inject: "false"
        checksum/config-volume-envoy: c5ca26039d50542de673a4a578803a5d69f4c85fcd033f9c4a672ffb7cd4052f
        checksum/config-volume: ed521864d32d701035ce91edefc645cb606e7fa0c7bf971ed2af09ca45aba460
    spec:
      serviceAccountName: istio-pilot-service-account
      containers:
        - name: discovery
          image: "gcr.io/istio-release/pilot:master-latest-daily"
          imagePullPolicy: Always
          args:
          - "discovery"
          - --monitoringAddr=:15014
          - --log_output_level=default:info
          - --domain
          - cluster.local
          - --secureGrpcAddr
          - ""
          - --keepaliveMaxServerConnectionAge
          - "30m"
          ports:
          - containerPort: 8080
          - containerPort: 15010
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 5
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GODEBUG
            value: "gctrace=1"
          - name: PILOT_TRACE_SAMPLING
            value: "1"
          - name: PILOT_DISABLE_XDS_MARSHALING_TO_ANY
            value: "1"
          - name: CONFIG_NAMESPACE
            value: istio-config
          resources:
            requests:
              cpu: 500m
              memory: 2048Mi
            
          volumeMounts:
          - name: config-volume
            mountPath: /etc/istio/config
        - name: istio-proxy
          image: "gcr.io/istio-release/proxyv2:master-latest-daily"
          imagePullPolicy: Always
          ports:
          - containerPort: 15011
          args:
          - proxy
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --serviceCluster
          - istio-pilot
          - --templateFile
          - /var/lib/envoy/envoy.yaml.tmpl
          - --controlPlaneAuthPolicy
          - MUTUAL_TLS
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          resources:
            limits:
              cpu: 2000m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
            
          volumeMounts:
          - name: istio-certs
            mountPath: /etc/certs
            readOnly: true
          - name: pilot-envoy-config
            mountPath: /var/lib/envoy
      volumes:
      - name: config-volume
        configMap:
          name: istio
      - name: pilot-envoy-config
        configMap:
          name: pilot-envoy-config
      - name: istio-certs
        secret:
          secretName: istio.istio-pilot-service-account
          optional: true
      affinity:      
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x      

---
# Source: istio-discovery/templates/enable-mesh-mtls.yaml
# Destination rule to disable (m)TLS when talking to API server, as API server doesn't have sidecar.
# Customer should add similar destination rules for other services that dont' have sidecar.
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: "api-server"
  namespace: istio-control
  labels:
    release: istio-control-istio-discovery
spec:
  host: "kubernetes.default.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: DISABLE

---

---
# Authentication policy to enable permissive mode for all services (that have sidecar) in the mesh.
apiVersion: "authentication.istio.io/v1alpha1"
kind: "MeshPolicy"
metadata:
  name: "default"
  labels:
    release: istio-control-istio-discovery
spec:
  peers:
  - mtls:
      mode: PERMISSIVE
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: "default"
  namespace: istio-control
  labels:
    release: istio-control-istio-discovery
spec:
  host: "*.local"
  trafficPolicy:
    tls:
      mode: DISABLE



---
# Source: istio-discovery/templates/autoscale.yaml

apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: istio-pilot
  namespace: istio-control
  labels:
    app: pilot
    release: istio-control-istio-discovery
spec:
  maxReplicas: 5
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: istio-pilot
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 80
---


version: 2

# VM environment. Includes docker, can run priv.
integrationDefaults: &integrationDefaults
  machine:
    image: ubuntu-1604:201903-01
  working_directory: /go/src/istio.io/installer
  environment:
    - CHANGE_MINIKUBE_NONE_USER: true
    - SKIP_CLEANUP: false
    - GOPATH: /go
    - KUBECONFIG: /go/out/minikube.conf
    - TEST_ENV: minikube-none

# remote docker environment for one namespace. Appears to be faster
integrationRemoteOneNamespace: &integrationRemoteOneNamespace
  working_directory: /go/src/istio.io/installer
  docker:
    - image: istionightly/ci:2019-08-30
      environment:
        GOPATH: /go
        SKIP_CLEANUP: false
        ONE_NAMESPACE: 1
        TMPDIR: /go/tmp

# Common procedure to initialize working directory
initWorkingDir: &initWorkingDir
  type: shell
  name: Initialize Working Directory
  pwd: /
  command: |
    sudo mkdir -p /go/bin
    sudo chown -R $USER /go
    cd /go/bin
    curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    chmod +x ./kubectl

# Environment:
#  by default runs in /home/circleci/project, and checkout is in current directory
#  ID is circleci(3434)

jobs:

  # Build all the templates, verify the templates work.
  build:
    working_directory: /go/src/istio.io/installer
    docker:
      # Image with KIND installed, based on Istio Kind node-image
      # Should have all tools we need, recreated when we rev the tool versions.
      - image: gcr.io/istio-testing/circleci:2019-04-22
        environment:
          GOPATH: /go
          TMPDIR: /go/tmp

    # Can run multiple images, first is primary, all use localhost
    steps:
      - checkout
      - run:
          command: make run-build
          # TODO: make lint
      - store_artifacts:
          path: /go/out/

  # Old integration tests in same namespace - simple (mtls strict and permissive), bookinfo
  integration-old-kind:
    <<: *integrationRemoteOneNamespace

    # Can run multiple images, first is primary, all use localhost
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: make gitdep
      - run:
          # Create KIND cluster (separate so we get time info)
          command: make info dep prepare
      - run:
          command: make sync
      - run:
          command: make docker-run-test TEST_TARGET="install-crds install-base install-ingress"
      - run:
          command: make docker-run-test TEST_TARGET="run-bookinfo"
      - run:
          command: make docker-run-test TEST_TARGET="run-simple"
      - run:
          command: make docker-run-test TEST_TARGET="run-simple-strict"
      - run:
          when: always
          command: make kind-logs
      - store_test_results:
          path: /go/out/tests
      - store_artifacts:
          path: /go/out/logs

  # Install the demo and bookinfo
  install-demo:
    <<: *integrationRemoteOneNamespace

    # Can run multiple images, first is primary, all use localhost
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: make gitdep
      - run:
          # Create KIND cluster (separate so we get time info)
          command: make info dep prepare
      - run:
          command: make sync
      - run:
          command: make docker-run-test TEST_TARGET="run-test-demo"
      - run:
          when: always
          command: make kind-logs
      - store_test_results:
          path: /go/out/tests
      - store_artifacts:
          path: /go/out/logs

  # Verify a-la-carte with no certificates ( smallest possible install, and cases without certs/mtls)
  # KNative tests.
  noauth:
    <<: *integrationRemoteOneNamespace

    # Can run multiple images, first is primary, all use localhost
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            mkdir -p $GOPATH/tmp
            mkdir -p $GOPATH/src/istio.io/
            git clone https://github.com/istio/istio.git $GOPATH/src/istio.io/istio
            git clone https://github.com/istio/tools.git $GOPATH/src/istio.io/tools
      - run:
          command: make info dep prepare
      - run:
          command: make sync run-build
      - run:
          command: make docker-run-test TEST_TARGET="run-test-noauth-micro"
      - run:
          command: make docker-run-test TEST_TARGET="run-test-noauth-full"
      - run:
          command: make docker-run-test TEST_TARGET="run-test-knative"
      - run:
          when: always
          command: make kind-logs
      - store_test_results:
          path: /go/out/tests
      - store_artifacts:
          path: /go/out/logs

  # KNative standalone test.
  knative:
    <<: *integrationRemoteOneNamespace

    # Can run multiple images, first is primary, all use localhost
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            mkdir -p $GOPATH/tmp
            mkdir -p $GOPATH/src/istio.io/
            git clone https://github.com/istio/istio.git $GOPATH/src/istio.io/istio
            git clone https://github.com/istio/tools.git $GOPATH/src/istio.io/tools
      - run:
          command: make info dep prepare
      - run:
          command: make sync run-build
      - run:
          command: make docker-run-test TEST_TARGET="run-test-knative"
      - run:
          when: always
          command: make kind-logs
      - store_test_results:
          path: /go/out/tests
      - store_artifacts:
          path: /go/out/logs

  # Uses machine and minikube --root, using one-step installation
  # Used to verify that minikube still works, and get a baseline/compare performance with remote docker.
  # This is testing the demo - should match install-demo results and time.
  install-minikube:
    <<: *integrationDefaults
    environment: &minikubeEnv
            - KUBECONFIG: /go/out/minikube.conf
            - GOPATH: /go
            - ISTIO_CONTROL: istio-control
            - TEST_ENV: minikube-none
            - RESOURCES_FLAGS: "-f test/kind/user-values.yaml"
    steps:
      - <<: *initWorkingDir
      - checkout
      - run: bin/testEnvRootMinikube.sh start
      - run: bin/testEnvRootMinikube.sh wait
      - run:
          command: make info dep
      - run:
          command: make git.dep run-test-demo
      - store_artifacts:
          path: /home/circleci/logs
      - store_artifacts:
          path: /tmp
      - store_artifacts:
          path: /var/lib/localkube/
      - store_test_results:
          path: /go/out/tests

  run-test-on-base-installation:
    <<: *integrationRemoteOneNamespace
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: make gitdep
      - run:
          # Create KIND cluster (separate so we get time info)
          command: make info dep prepare
      - run:
          command: make sync
      - run:
          command: make kind-run TARGET="install-base ENABLE_NAMESPACES_BY_DEFAULT=false"
      - run:
          command: make docker-run-test TEST_TARGET="run-reachability-test ENABLE_NAMESPACES_BY_DEFAULT=false"
      - run:
          when: always
          command: make kind-logs
      - store_test_results:
          path: /go/out/tests
      - store_artifacts:
          path: /go/out/logs

workflows:
  version: 2
  nightly:
    triggers:
       - schedule:
           cron: "0 0,4,8,12,16,20 * * *"
           filters:
             branches:
               only:
                 - master
                 - dev
    jobs:
      - build
      - integration-old-kind
      - install-minikube
      - install-demo
      - noauth
      - knative
      - run-test-on-base-installation

  all:
    jobs:
      - build
      - integration-old-kind
      - install-minikube
      - install-demo
      - noauth
      - run-test-on-base-installation

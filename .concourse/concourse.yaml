---

# s3, git, time, github-release, registry-image,
# pool - serialize access to external systems
# git - can also push
resources:
  - name: citadel-image
    type: docker-image
    source:
      repository: gcr.io/istio-release/citadel
      tag: release-1.1-latest-daily

  - name: istio-installer
    type: git
    source:
      uri: "https://github.com/istio-ecosystem/istio-installer"
  - name: istio-istio
    type: git
    source:
      uri: "https://github.com/istio/istio"
      branch: release-1.1
      
jobs:
  - name: install
    plan:
    - get: citadel-image
      trigger: true
    - get: istio-installer
      trigger: true
    - task: install-crds
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            cd src/github.com/istio-ecosystem/istio-installer/
            export IBASE=$(pwd)
            echo "((KUBECONFIG))" > kubeconfig.yaml
            export KUBECONFIG=$IBASE/kubeconfig.yaml
            set -x
            
            echo "Installing custom ressource defintions"
            kubectl apply -f crds.yaml
            
            kubectl wait --for=condition=Established -f crds.yaml
    - task: install-system
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            cd src/github.com/istio-ecosystem/istio-installer/
            export IBASE=$(pwd)
            echo "((KUBECONFIG))" > kubeconfig.yaml
            export KUBECONFIG=$IBASE/kubeconfig.yaml
            set -x

            kubectl delete namespace istio-system --wait --ignore-not-found
            echo "Installing citadel.."
            bin/iop istio-system istio-system-security $IBASE/security/citadel/
            
            kubectl get deployments -n istio-system
            kubectl wait deployments istio-citadel11 -n istio-system --for=condition=available --timeout=1m
            kubectl get deployments -n istio-system
            kubectl get pod -n istio-system
    - task: install-control
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            cd src/github.com/istio-ecosystem/istio-installer/
            export IBASE=$(pwd)
            echo "((KUBECONFIG))" > kubeconfig.yaml
            export KUBECONFIG=$IBASE/kubeconfig.yaml
            set -x

            kubectl delete namespace istio-control --wait --ignore-not-found
            echo "Installing galley.."
            bin/iop istio-control istio-config $IBASE/istio-control/istio-config --set configValidation=true
            echo "Installing pilot.."
            bin/iop istio-control istio-discovery $IBASE/istio-control/istio-discovery
            echo "Installing auto-injector.."
            bin/iop istio-control istio-autoinject $IBASE/istio-control/istio-autoinject --set global.istioNamespace=istio-control

            kubectl get deployments -n istio-control
            kubectl wait deployments istio-galley istio-pilot istio-sidecar-injector -n istio-control --for=condition=available --timeout=1m
            kubectl get deployments -n istio-control
            kubectl get pod -n istio-control 
    - task: install-ingress
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            cd src/github.com/istio-ecosystem/istio-installer/
            export IBASE=$(pwd)
            echo "((KUBECONFIG))" > kubeconfig.yaml
            export KUBECONFIG=$IBASE/kubeconfig.yaml
            set -x

            kubectl delete namespace istio-ingress --wait --ignore-not-found
            echo "Installing pilot.."
            bin/iop istio-ingress istio-discovery $IBASE/istio-control/istio-discovery
            echo "Installing ingress.."
            bin/iop istio-ingress istio-ingress $IBASE/gateways/istio-ingress  --set global.istioNamespace=istio-control

            kubectl get deployments -n istio-ingress
            kubectl wait deployments ingressgateway istio-pilot -n istio-ingress --for=condition=available --timeout=1m
            kubectl get deployments -n istio-ingress
            kubectl get pod -n istio-ingress
    - task: install-telemetry
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            cd src/github.com/istio-ecosystem/istio-installer/
            export IBASE=$(pwd)
            echo "((KUBECONFIG))" > kubeconfig.yaml
            export KUBECONFIG=$IBASE/kubeconfig.yaml
            set -x

            kubectl delete namespace istio-telemetry --wait --ignore-not-found
            echo "Installing istio-grafana.."
            bin/iop istio-telemetry istio-grafana $IBASE/istio-telemetry/grafana/ --set global.istioNamespace=istio-control
            echo "Installing istio-mixer.."
            bin/iop istio-telemetry istio-mixer $IBASE/istio-telemetry/mixer-telemetry/ --set global.istioNamespace=istio-control
            echo "Installing istio-prometheus."
            bin/iop istio-telemetry istio-prometheus $IBASE/istio-telemetry/prometheus/ --set global.istioNamespace=istio-control
            kubectl get deployments -n istio-ingress
            kubectl wait deployments ingressgateway istio-pilot -n istio-ingress --for=condition=available --timeout=1m
            kubectl get deployments -n istio-ingress
            kubectl get pod -n istio-ingress
  - name: test
    plan:
    - get: istio-installer
      passed: [ install ]
      trigger: true
    - get: istio-istio
      trigger: false
    - task: install-bookinfo
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-istio
            path: src/github.com/istio/istio
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            cd src/github.com/istio/istio/
            echo "((KUBECONFIG))" > kubeconfig.yaml
            export KUBECONFIG=$(pwd)/kubeconfig.yaml
            set -x
            kubectl label namespace default istio-env=istio-control --overwrite

            kubectl delete -f samples/bookinfo/platform/kube/bookinfo.yaml --ignore-not-found
            kubectl delete -f samples/bookinfo/networking/destination-rule-all-mtls.yaml --ignore-not-found
            kubectl delete -f samples/bookinfo/networking/bookinfo-gateway.yaml --ignore-not-found

            kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
            kubectl apply -f samples/bookinfo/networking/destination-rule-all-mtls.yaml
            kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml

            export INGRESS_HOST=$(kubectl -n istio-ingress get service ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            export INGRESS_PORT=$(kubectl -n istio-ingress get service ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
            export SECURE_INGRESS_PORT=$(kubectl -n istio-ingress get service ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].port}')
            export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT
            set +e
            n=1
            until [ $n -ge 5 ]
            do
              
              RESULT=$(curl -s -o /dev/null -w "%{http_code}" http://${GATEWAY_URL}/productpage)
              if [ $RESULT -eq "200"  ]; then
              break
              fi
              n=$((n+1))
              echo "Retrying in 10s..."
              sleep 10
            done
            set -e

            echo "Cleaning up..."
            kubectl delete -f samples/bookinfo/platform/kube/bookinfo.yaml --ignore-not-found
            kubectl delete -f samples/bookinfo/networking/destination-rule-all-mtls.yaml --ignore-not-found
            kubectl delete -f samples/bookinfo/networking/bookinfo-gateway.yaml --ignore-not-found


